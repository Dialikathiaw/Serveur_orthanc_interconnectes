from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
import warnings
import os
warnings.filterwarnings("ignore")

app = Flask(__name__)
CORS(app)  # Permettre les requ√™tes CORS

# Variables globales pour le mod√®le
model = None
vectorizer = None
le = None
is_model_ready = False

def load_and_train_model():
    """Charger les donn√©es et entra√Æner le mod√®le"""
    global model, vectorizer, le, is_model_ready
    
    try:
        # V√©rifier si le fichier existe
        if not os.path.exists("dataset.csv"):
            print("‚ùå ERREUR : dataset.csv introuvable dans le r√©pertoire courant")
            print("üìÅ R√©pertoire courant :", os.getcwd())
            print("üìã Fichiers pr√©sents :", os.listdir('.'))
            return False
        
        print("üìä Chargement du dataset...")
        df = pd.read_csv("dataset.csv")
        print(f"‚úÖ Dataset charg√© : {len(df)} √©chantillons")
        
        # V√©rifier les colonnes requises
        required_cols = ['Disease'] + [f"Symptom_{i}" for i in range(1, 18)]
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            print(f"‚ùå ERREUR : Colonnes manquantes dans le dataset : {missing_cols}")
            return False
        
        # Pr√©paration des donn√©es
        symptom_cols = [f"Symptom_{i}" for i in range(1, 18)]
        for col in symptom_cols:
            df[col] = df[col].fillna("").astype(str).str.strip().str.lower()
        
        df["symptoms_text"] = df[symptom_cols].apply(
            lambda row: " ".join([s for s in row if s != ""]), axis=1
        )
        
        # Encodage et vectorisation
        print("üîÑ Entra√Ænement du mod√®le...")
        le = LabelEncoder()
        y = le.fit_transform(df["Disease"])
        
        vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
        X = vectorizer.fit_transform(df["symptoms_text"])
        
        # Entra√Ænement du mod√®le
        model = RandomForestClassifier(n_estimators=200, random_state=42)
        model.fit(X, y)
        
        is_model_ready = True
        print("‚úÖ Mod√®le entra√Æn√© avec succ√®s !")
        print(f"üè• Maladies reconnues : {list(le.classes_)}")
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR lors du chargement : {str(e)}")
        return False

@app.route('/')
def index():
    return jsonify({
        'status': 'API Flask active',
        'model_ready': is_model_ready,
        'message': 'API de pr√©diction de maladies'
    })

@app.route('/predict', methods=['POST', 'OPTIONS'])
def predict():
    # G√©rer les requ√™tes OPTIONS (CORS preflight)
    if request.method == 'OPTIONS':
        return jsonify({'status': 'OK'})
    
    try:
        if not is_model_ready:
            return jsonify({
                'error': 'Mod√®le non disponible',
                'message': 'Le dataset n\'a pas pu √™tre charg√©'
            }), 500
        
        data = request.get_json()
        if not data or 'symptoms' not in data:
            return jsonify({
                'error': 'Donn√©es invalides',
                'message': 'Veuillez fournir une liste de sympt√¥mes'
            }), 400
        
        symptoms = data.get('symptoms', [])
        if not symptoms:
            return jsonify({
                'error': 'Aucun sympt√¥me fourni',
                'message': 'Veuillez saisir au moins un sympt√¥me'
            }), 400
        
        # Nettoyer et pr√©parer les sympt√¥mes
        symptoms_clean = [s.lower().strip() for s in symptoms if s.strip() != ""]
        symptoms_text = ' '.join(symptoms_clean)
        
        print(f"üîç Analyse des sympt√¥mes : {symptoms_clean}")
        
        # Pr√©diction
        X_new = vectorizer.transform([symptoms_text])
        prediction = model.predict(X_new)
        probabilities = model.predict_proba(X_new)[0]
        
        disease = le.inverse_transform(prediction)[0]
        confidence = max(probabilities) * 100
        
        print(f"üìã Pr√©diction : {disease} (confiance: {confidence:.1f}%)")
        
        return jsonify({
            'symptoms': symptoms_clean,
            'disease': disease,
            'confidence': round(confidence, 1),
            'status': 'success'
        })
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la pr√©diction : {str(e)}")
        return jsonify({
            'error': 'Erreur de pr√©diction',
            'message': str(e)
        }), 500

@app.route('/health')
def health():
    return jsonify({
        'status': 'healthy',
        'model_ready': is_model_ready,
        'timestamp': pd.Timestamp.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ D√©marrage de l'API Flask...")
    print("üìÅ R√©pertoire de travail :", os.getcwd())
    
    # Charger et entra√Æner le mod√®le au d√©marrage
    if load_and_train_model():
        print("üåê Serveur pr√™t sur http://127.0.0.1:5001")
    else:
        print("‚ö†Ô∏è  Serveur d√©marr√© mais mod√®le non disponible")
    
    app.run(debug=True, port=5001, host='127.0.0.1')
